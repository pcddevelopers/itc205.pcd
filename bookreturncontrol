package library.returnBook;
import library.entities.Book;
import library.entities.library;
import library.entities.Loan;

public class returnBookcontrol { // change rETURN_bOOK_cONTROL to returnBookcontrol

	private returnBookui Ui; //change ReturnBookUI to returnBookui
	private enum controlstate { INITIALISED, READY, INSPECTING }; //change cOnTrOl_sTaTe to controlstate
	private controlstate state; //change sTaTe to state
	
	private library library; // change lIbRaRy to library
	private Loan currentLoan; //change CurrENT_loan to currentLoan
	

	public returnBookcontrol() {
		this.library = library.getInstance(); // change GeTiNsTaNcE to getInstance
		state = controlstate.INITIALISED;
	}
	
	
	public void setUi(returnBookui uI) { //change sEt_uI to setUi
		if (!state.equals(controlstate.INITIALISED)) 
			throw new RuntimeException("ReturnBookControl: cannot call setUI except in INITIALISED state");
		
		this.Ui = ui; //change uI to ui
		ui.setState(returnBookui.uiState.READY); // change sEt_sTaTe to setState, uI_sTaTe to uiState
		state = controlstate.READY;		
	}


	public void bookScanned(int bookId) { // change bOoK_sCaNnEd to bookScanned, bOoK_iD to bookId
		if (!state.equals(controlstate.READY)) 
			throw new RuntimeException("ReturnBookControl: cannot call bookScanned except in READY state");
		
		Book currentBook = library.getBook(bookId); //change cUrReNt_bOoK to currentBook, gEt_BoOk to getBook
		
		if (currentBook == null) {
			ui.Display("Invalid Book Id"); //change Ui.DiSpLaY to ui.Display
			return;
		}
		if (!currentBook.isOnloan()) { // change iS_On_LoAn to isOnloan
			ui.Display("Book has not been borrowed");
			return;
		}		
		currentLoan = library.getLoanbybookId(bookId);	//change GeT_LoAn_By_BoOkId to getLoanbybookId
		double overDuefine = 0.0; // change Over_Due_Fine to overDuefine
		if (currentLoan.isOverdue()) //change Is_OvEr_DuE to isOverdue
			overDuefine = library.caluclateOdfine(currentLoan);// change CaLcUlAtE_OvEr_DuE_FiNe to caluclateOdfine
		
		ui.Display("Inspecting");
		ui.Display(currentBook.toString());
		ui.Display(currentLoan.toString());
		
		if (currentLoan.isOverdue()) 
			ui.Display(String.format("\nOverdue fine : $%.2f", overDuefine));
		
		ui.setState(returnBookui.uiState.INSPECTING);
		state = controlstate.INSPECTING;		
	}


	public void scanningComplete() { //change sCaNnInG_cOmPlEtE to scanningComplete
		if (!state.equals(controlstate.READY)) 
			throw new RuntimeException("ReturnBookControl: cannot call scanningComplete except in READY state");
			
		ui.setState(returnBookui.uiState.COMPLETED);		
	}


	public void dischargeLoan(boolean isDamaged) { // change dIsChArGe_lOaN to dischargeLoan, iS_dAmAgEd to isDamaged
		if (!state.equals(controlstate.INSPECTING)) 
			throw new RuntimeException("ReturnBookControl: cannot call dischargeLoan except in INSPECTING state");
		
		library.dischargeLoan(currentLoan, isDamaged); //change DiScHaRgE_LoAn to dischargeLoan, iS_dAmAgEd to isDamaged
		currentLoan = null;
		ui.setState(returnBookui.uiState.READY);
		state = control.READY;				
	}


}
